#!/usr/bin/env python
#   This file is part of nexdatas - Tango Server for NeXus data writer
#
#    Copyright (C) 2014 DESY, Jan Kotanski <jkotan@mail.desy.de>
#
#    nexdatas is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    nexdatas is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with nexdatas.  If not, see <http://www.gnu.org/licenses/>.
## \package nxselector nexdatas
## \file nxsscan
# GUI for setting sardana scans with NeXus Recorder

""" NXS Scan - GUI for setting sardana scans with NeXus Recorder"""

import logging
import sys
from optparse import OptionParser

#from PyQt4.QtGui import (QApplication, QIcon)

import nxselector 
from nxselector.Selector import Selector
from nxselector.qrc import qrc_resources
from nxselector import __version__

logger = logging.getLogger(__name__)

## the main function
def main():
    levels = {'debug': logging.DEBUG,
              'info': logging.INFO,
              'warning': logging.WARNING,
              'error': logging.ERROR,
              'critical': logging.CRITICAL}

    usage = "usage: nxselector [-s server] [-l logging_level] [-v] [-n]"

    parser = OptionParser(usage=usage)

    parser.add_option(
        "-v","--version", 
        action="store_true",
        default=False,
        dest="version", 
        help="program version")
    parser.add_option(
        "-n","--no-taurus", 
        action="store_true",
        default=False,
        dest="notaurus", 
        help="ignore taurus package")
    parser.add_option(
        "-s","--server", dest="server", 
        help="configuration server")
    parser.add_option(
        "-t","--style", dest="style", 
        help="Qt style")
    parser.add_option(
        "-y","--stylesheet", dest="stylesheet", 
        help="Qt stylesheet")
    parser.add_option(
        "-l","--log", dest="log", 
        help="logging level, i.e. debug, info, warning, error, critical")

    (options, _) = parser.parse_args()
    if options.log:
        level_name = options.log
        level = levels.get(level_name, logging.NOTSET)
        logging.basicConfig(level=level)     

    if options.version:
        print (__version__)
        sys.exit(0)
    if options.notaurus:
        nxselector.TAURUS = False

#    import gc
#    gc.set_debug(gc.DEBUG_LEAK | gc.DEBUG_STATS)
#    gc.set_debug(gc.DEBUG_LEAK )

        
#    app = QApplication([])

    if nxselector.TAURUS:
        from taurus.external.qt import Qt
        import taurus.qt.qtgui.application
        Application = taurus.qt.qtgui.application.TaurusApplication
        
        app = Application.instance()
        standalone = app is None


    if standalone:
        app = Application()

    if options.style:
        app.setStyle(options.style)
    if options.stylesheet:
        app.setStyle(options.stylesheet)
#    app.setWindowIcon(QIcon(":/icon.png"))
    app.setWindowIcon(Qt.QIcon(":/configtools.png"))
    app.setOrganizationName("DESY")
    app.setOrganizationDomain("desy.de")
    app.setApplicationName("NXS Component Selector")
    form = Selector(options.server)

    form.show()

    if standalone:
        sys.exit(app.exec_())
    else:
        return form



if __name__ == "__main__":
    main()


